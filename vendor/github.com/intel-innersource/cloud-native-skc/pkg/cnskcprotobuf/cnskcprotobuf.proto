syntax = "proto3";
option go_package = "applications.security.isecl.cloud-native-skc/pkg/cnskcprotobuf/cnskcprotobuf.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

package cnskcprotobuf;
service cnskcprotobuf {
    rpc Session (SessionRequest) returns (SessionResponse);
    rpc CloseSession (SessionID) returns (CloseSessionResponse);
    rpc NewCipher (KeyIDRequest) returns (CipherResponse);
    rpc NewGCM (GcmRequest) returns (GcmResponse);
    rpc NonceSize(NonceSizeRequest) returns (NonceSizeResponse);
    rpc Seal (SealRequest) returns (SealResponse);
    rpc Open(DecryptRequest) returns (DecryptResponse);
    rpc New (HmacRequest) returns (HmacResponse);
    rpc Write (WriteHmacRequest) returns (WriteHmacResponse);
    rpc Sum (SumHmacRequest) returns (SumHmacResponse);
}

message SessionRequest {
    bytes skcserver_token = 1; // place holder, not used currently
    bytes nonce = 2 [(validator.field) = {msg_exists : true}];
}

message SessionID {
    bytes session_id = 1 [(validator.field) = {msg_exists : true}];
}

message AttestationID {
    bytes attestation_id = 1 [(validator.field) = {msg_exists : true}];
}

message SessionResponse {
    int32 result = 1 [(validator.field) = {int_gt: -1, int_lt: 100}];
    SessionID session_id = 2 [(validator.field) = {msg_exists : true}];
    bytes tee_evidence = 3 [(validator.field) = {msg_exists : true}];
    AttestationID attestation_id = 4; // attestation_id should be the nonce passed in the session request
    string public_key = 5 [(validator.field) = {regex: "^[a-zA-Z0-9=]{5,1000}$"}];
}

message CloseSessionResponse {
    int32 result = 1 [(validator.field) = {int_gt: -1, int_lt: 100}];
}

message KeyInformation{
    string KBSURL = 1 [(validator.field) = {regex: "(http|https):\\/\\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])"}];
    string AASToken=2 [(validator.field) = {regex: "^[a-zA-Z0-9=-_+/]"}];
    string CMSRootCA=3 [(validator.field) = {regex: "^[a-zA-Z0-9=-_+/]"}];
}

message KeyIDRequest {
    SessionID session_id = 1 [(validator.field) = {msg_exists : true}];
    bytes key_id = 2 [(validator.field) = {msg_exists : true}];
    KeyInformation key_info=3 [(validator.field) = {msg_exists : true}];
}

message CipherResponse {
    bytes cipher = 1;
    // 0 - success , others need to be defined for different errors
    int64 error_status = 2 [(validator.field) = {int_gt: -1, int_lt: 100}];
    AttestationID attestation_id = 3 [(validator.field) = {msg_exists : true}];
}

message GcmRequest {
    SessionID session_id = 1 [(validator.field) = {msg_exists : true}];
    bytes cipher = 2 [(validator.field) = {msg_exists : true}];
}

message GcmResponse {
    bytes gcm = 1 [(validator.field) = {msg_exists : true}];
    // 0 - success , others need to be defined for different errors
    int64 error_status = 2 [(validator.field) = {int_gt: -1, int_lt: 100}];
    AttestationID attestation_id = 3 [(validator.field) = {msg_exists : true}];
}

message NonceSizeRequest {
    SessionID session_id = 1 [(validator.field) = {msg_exists : true}];
    bytes gcm = 2 [(validator.field) = {msg_exists : true}];
}

message NonceSizeResponse {
    int64 nonce_size = 1;
    // 0 - success , others need to be defined for different errors
    int64 error_status = 2 [(validator.field) = {int_gt: -1, int_lt: 100}];
    AttestationID attestation_id = 3 [(validator.field) = {msg_exists : true}];
}

message SealRequest {
    SessionID session_id = 1 [(validator.field) = {msg_exists : true}];
    bytes gcm = 2 [(validator.field) = {msg_exists : true}];
    bytes dst = 3 [(validator.field) = {msg_exists : true}];
    bytes nonce = 4 [(validator.field) = {msg_exists : true}];
    bytes plaintext = 5 [(validator.field) = {msg_exists : true}];
    bytes additionaldata = 6 [(validator.field) = {msg_exists : true}];
}

message SealResponse {
    bytes ciphertext = 1 [(validator.field) = {msg_exists : true}];
    // 0 - success , others need to be defined for different errors
    int64 error_status = 2 [(validator.field) = {int_gt: -1, int_lt: 100}];
    AttestationID attestation_id = 3 [(validator.field) = {msg_exists : true}];
}

message DecryptRequest {
    SessionID session_id = 1 [(validator.field) = {msg_exists : true}];
    bytes gcm = 2 [(validator.field) = {msg_exists : true}];
    bytes dst = 3 [(validator.field) = {msg_exists : true}];
    bytes nonce = 4 [(validator.field) = {msg_exists : true}];
    bytes ciphertext = 5 [(validator.field) = {msg_exists : true}];
    bytes additionaldata = 6 [(validator.field) = {msg_exists : true}];
}

message DecryptResponse {
    bytes plaintext = 1 [(validator.field) = {msg_exists : true}];
    // 0 - success , others need to be defined for different errors
    int64 error_status = 2 [(validator.field) = {int_gt: -1, int_lt: 100}];
    AttestationID attestation_id = 3 [(validator.field) = {msg_exists : true}];
}

message HmacRequest {
    SessionID session_id = 1 [(validator.field) = {msg_exists : true}];
    bytes key_id = 2 [(validator.field) = {msg_exists : true}];
    string sha_type = 3 [(validator.field) = {msg_exists : true}];
}

message HmacResponse {
    bytes hash = 1 [(validator.field) = {msg_exists : true}];
    // 0 - success , others need to be defined for different errors
    int64 error_status = 2 [(validator.field) = {int_gt: -1, int_lt: 100}];;
    AttestationID attestation_id = 3 [(validator.field) = {msg_exists : true}];
}

message WriteHmacRequest {
    SessionID session_id = 1 [(validator.field) = {msg_exists : true}];
    bytes text = 2 [(validator.field) = {msg_exists : true}];
    bytes hash_address = 3 [(validator.field) = {msg_exists : true}];
}

message WriteHmacResponse {
    // 0 - success , others need to be defined for different errors
    int64 error_status = 1 [(validator.field) = {int_gt: -1, int_lt: 100}];
    AttestationID attestation_id = 2 [(validator.field) = {msg_exists : true}];
}

message SumHmacRequest {
    SessionID session_id = 1 [(validator.field) = {msg_exists : true}];
    bytes hash_address = 2 [(validator.field) = {msg_exists : true}];
    bytes input = 3 [(validator.field) = {msg_exists : true}];
}

message SumHmacResponse {
    // 0 - success , others need to be defined for different errors
    int64 error_status = 1 [(validator.field) = {int_gt: -1, int_lt: 100}];
    bytes signature = 2 [(validator.field) = {msg_exists : true}];
    AttestationID attestation_id = 3 [(validator.field) = {msg_exists : true}];
}
