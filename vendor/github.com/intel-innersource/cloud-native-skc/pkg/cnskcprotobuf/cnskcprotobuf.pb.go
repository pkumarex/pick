// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: pkg/cnskcprotobuf/cnskcprotobuf.proto

package cnskcprotobuf_proto

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkcserverToken []byte `protobuf:"bytes,1,opt,name=skcserver_token,json=skcserverToken,proto3" json:"skcserver_token,omitempty"` // place holder, not used currently
	Nonce          []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *SessionRequest) Reset() {
	*x = SessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest.ProtoReflect.Descriptor instead.
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{0}
}

func (x *SessionRequest) GetSkcserverToken() []byte {
	if x != nil {
		return x.SkcserverToken
	}
	return nil
}

func (x *SessionRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type SessionID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionID) Reset() {
	*x = SessionID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionID) ProtoMessage() {}

func (x *SessionID) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionID.ProtoReflect.Descriptor instead.
func (*SessionID) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{1}
}

func (x *SessionID) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

type AttestationID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttestationId []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (x *AttestationID) Reset() {
	*x = AttestationID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationID) ProtoMessage() {}

func (x *AttestationID) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationID.ProtoReflect.Descriptor instead.
func (*AttestationID) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{2}
}

func (x *AttestationID) GetAttestationId() []byte {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

type SessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        int32          `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	SessionId     *SessionID     `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TeeEvidence   []byte         `protobuf:"bytes,3,opt,name=tee_evidence,json=teeEvidence,proto3" json:"tee_evidence,omitempty"`
	AttestationId *AttestationID `protobuf:"bytes,4,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"` // attestation_id should be the nonce passed in the session request
	PublicKey     string         `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *SessionResponse) Reset() {
	*x = SessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse.ProtoReflect.Descriptor instead.
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{3}
}

func (x *SessionResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *SessionResponse) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *SessionResponse) GetTeeEvidence() []byte {
	if x != nil {
		return x.TeeEvidence
	}
	return nil
}

func (x *SessionResponse) GetAttestationId() *AttestationID {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

func (x *SessionResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type CloseSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CloseSessionResponse) Reset() {
	*x = CloseSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionResponse) ProtoMessage() {}

func (x *CloseSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionResponse.ProtoReflect.Descriptor instead.
func (*CloseSessionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{4}
}

func (x *CloseSessionResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type KeyInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KBSURL    string `protobuf:"bytes,1,opt,name=KBSURL,proto3" json:"KBSURL,omitempty"`
	AASToken  string `protobuf:"bytes,2,opt,name=AASToken,proto3" json:"AASToken,omitempty"`
	CMSRootCA string `protobuf:"bytes,3,opt,name=CMSRootCA,proto3" json:"CMSRootCA,omitempty"`
}

func (x *KeyInformation) Reset() {
	*x = KeyInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInformation) ProtoMessage() {}

func (x *KeyInformation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInformation.ProtoReflect.Descriptor instead.
func (*KeyInformation) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{5}
}

func (x *KeyInformation) GetKBSURL() string {
	if x != nil {
		return x.KBSURL
	}
	return ""
}

func (x *KeyInformation) GetAASToken() string {
	if x != nil {
		return x.AASToken
	}
	return ""
}

func (x *KeyInformation) GetCMSRootCA() string {
	if x != nil {
		return x.CMSRootCA
	}
	return ""
}

type KeyIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *SessionID      `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	KeyId     []byte          `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeyInfo   *KeyInformation `protobuf:"bytes,3,opt,name=key_info,json=keyInfo,proto3" json:"key_info,omitempty"`
}

func (x *KeyIDRequest) Reset() {
	*x = KeyIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyIDRequest) ProtoMessage() {}

func (x *KeyIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyIDRequest.ProtoReflect.Descriptor instead.
func (*KeyIDRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{6}
}

func (x *KeyIDRequest) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *KeyIDRequest) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *KeyIDRequest) GetKeyInfo() *KeyInformation {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

type CipherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cipher []byte `protobuf:"bytes,1,opt,name=cipher,proto3" json:"cipher,omitempty"`
	// 0 - success , others need to be defined for different errors
	ErrorStatus   int64          `protobuf:"varint,2,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	AttestationId *AttestationID `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (x *CipherResponse) Reset() {
	*x = CipherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CipherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CipherResponse) ProtoMessage() {}

func (x *CipherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CipherResponse.ProtoReflect.Descriptor instead.
func (*CipherResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{7}
}

func (x *CipherResponse) GetCipher() []byte {
	if x != nil {
		return x.Cipher
	}
	return nil
}

func (x *CipherResponse) GetErrorStatus() int64 {
	if x != nil {
		return x.ErrorStatus
	}
	return 0
}

func (x *CipherResponse) GetAttestationId() *AttestationID {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

type GcmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *SessionID `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Cipher    []byte     `protobuf:"bytes,2,opt,name=cipher,proto3" json:"cipher,omitempty"`
}

func (x *GcmRequest) Reset() {
	*x = GcmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcmRequest) ProtoMessage() {}

func (x *GcmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcmRequest.ProtoReflect.Descriptor instead.
func (*GcmRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{8}
}

func (x *GcmRequest) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *GcmRequest) GetCipher() []byte {
	if x != nil {
		return x.Cipher
	}
	return nil
}

type GcmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gcm []byte `protobuf:"bytes,1,opt,name=gcm,proto3" json:"gcm,omitempty"`
	// 0 - success , others need to be defined for different errors
	ErrorStatus   int64          `protobuf:"varint,2,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	AttestationId *AttestationID `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (x *GcmResponse) Reset() {
	*x = GcmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcmResponse) ProtoMessage() {}

func (x *GcmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcmResponse.ProtoReflect.Descriptor instead.
func (*GcmResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{9}
}

func (x *GcmResponse) GetGcm() []byte {
	if x != nil {
		return x.Gcm
	}
	return nil
}

func (x *GcmResponse) GetErrorStatus() int64 {
	if x != nil {
		return x.ErrorStatus
	}
	return 0
}

func (x *GcmResponse) GetAttestationId() *AttestationID {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

type NonceSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *SessionID `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Gcm       []byte     `protobuf:"bytes,2,opt,name=gcm,proto3" json:"gcm,omitempty"`
}

func (x *NonceSizeRequest) Reset() {
	*x = NonceSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceSizeRequest) ProtoMessage() {}

func (x *NonceSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceSizeRequest.ProtoReflect.Descriptor instead.
func (*NonceSizeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{10}
}

func (x *NonceSizeRequest) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *NonceSizeRequest) GetGcm() []byte {
	if x != nil {
		return x.Gcm
	}
	return nil
}

type NonceSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonceSize int64 `protobuf:"varint,1,opt,name=nonce_size,json=nonceSize,proto3" json:"nonce_size,omitempty"`
	// 0 - success , others need to be defined for different errors
	ErrorStatus   int64          `protobuf:"varint,2,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	AttestationId *AttestationID `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (x *NonceSizeResponse) Reset() {
	*x = NonceSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceSizeResponse) ProtoMessage() {}

func (x *NonceSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceSizeResponse.ProtoReflect.Descriptor instead.
func (*NonceSizeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{11}
}

func (x *NonceSizeResponse) GetNonceSize() int64 {
	if x != nil {
		return x.NonceSize
	}
	return 0
}

func (x *NonceSizeResponse) GetErrorStatus() int64 {
	if x != nil {
		return x.ErrorStatus
	}
	return 0
}

func (x *NonceSizeResponse) GetAttestationId() *AttestationID {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

type SealRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      *SessionID `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Gcm            []byte     `protobuf:"bytes,2,opt,name=gcm,proto3" json:"gcm,omitempty"`
	Dst            []byte     `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	Nonce          []byte     `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Plaintext      []byte     `protobuf:"bytes,5,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	Additionaldata []byte     `protobuf:"bytes,6,opt,name=additionaldata,proto3" json:"additionaldata,omitempty"`
}

func (x *SealRequest) Reset() {
	*x = SealRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealRequest) ProtoMessage() {}

func (x *SealRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealRequest.ProtoReflect.Descriptor instead.
func (*SealRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{12}
}

func (x *SealRequest) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *SealRequest) GetGcm() []byte {
	if x != nil {
		return x.Gcm
	}
	return nil
}

func (x *SealRequest) GetDst() []byte {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *SealRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *SealRequest) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *SealRequest) GetAdditionaldata() []byte {
	if x != nil {
		return x.Additionaldata
	}
	return nil
}

type SealResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext []byte `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	// 0 - success , others need to be defined for different errors
	ErrorStatus   int64          `protobuf:"varint,2,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	AttestationId *AttestationID `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (x *SealResponse) Reset() {
	*x = SealResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealResponse) ProtoMessage() {}

func (x *SealResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealResponse.ProtoReflect.Descriptor instead.
func (*SealResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{13}
}

func (x *SealResponse) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *SealResponse) GetErrorStatus() int64 {
	if x != nil {
		return x.ErrorStatus
	}
	return 0
}

func (x *SealResponse) GetAttestationId() *AttestationID {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

type DecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      *SessionID `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Gcm            []byte     `protobuf:"bytes,2,opt,name=gcm,proto3" json:"gcm,omitempty"`
	Dst            []byte     `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	Nonce          []byte     `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Ciphertext     []byte     `protobuf:"bytes,5,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Additionaldata []byte     `protobuf:"bytes,6,opt,name=additionaldata,proto3" json:"additionaldata,omitempty"`
}

func (x *DecryptRequest) Reset() {
	*x = DecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptRequest) ProtoMessage() {}

func (x *DecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptRequest.ProtoReflect.Descriptor instead.
func (*DecryptRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{14}
}

func (x *DecryptRequest) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *DecryptRequest) GetGcm() []byte {
	if x != nil {
		return x.Gcm
	}
	return nil
}

func (x *DecryptRequest) GetDst() []byte {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *DecryptRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DecryptRequest) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *DecryptRequest) GetAdditionaldata() []byte {
	if x != nil {
		return x.Additionaldata
	}
	return nil
}

type DecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plaintext []byte `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	// 0 - success , others need to be defined for different errors
	ErrorStatus   int64          `protobuf:"varint,2,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	AttestationId *AttestationID `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (x *DecryptResponse) Reset() {
	*x = DecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptResponse) ProtoMessage() {}

func (x *DecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptResponse.ProtoReflect.Descriptor instead.
func (*DecryptResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{15}
}

func (x *DecryptResponse) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *DecryptResponse) GetErrorStatus() int64 {
	if x != nil {
		return x.ErrorStatus
	}
	return 0
}

func (x *DecryptResponse) GetAttestationId() *AttestationID {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

type HmacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *SessionID `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	KeyId     []byte     `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ShaType   string     `protobuf:"bytes,3,opt,name=sha_type,json=shaType,proto3" json:"sha_type,omitempty"`
}

func (x *HmacRequest) Reset() {
	*x = HmacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacRequest) ProtoMessage() {}

func (x *HmacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacRequest.ProtoReflect.Descriptor instead.
func (*HmacRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{16}
}

func (x *HmacRequest) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *HmacRequest) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *HmacRequest) GetShaType() string {
	if x != nil {
		return x.ShaType
	}
	return ""
}

type HmacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// 0 - success , others need to be defined for different errors
	ErrorStatus   int64          `protobuf:"varint,2,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	AttestationId *AttestationID `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (x *HmacResponse) Reset() {
	*x = HmacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HmacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HmacResponse) ProtoMessage() {}

func (x *HmacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HmacResponse.ProtoReflect.Descriptor instead.
func (*HmacResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{17}
}

func (x *HmacResponse) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *HmacResponse) GetErrorStatus() int64 {
	if x != nil {
		return x.ErrorStatus
	}
	return 0
}

func (x *HmacResponse) GetAttestationId() *AttestationID {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

type WriteHmacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   *SessionID `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Text        []byte     `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	HashAddress []byte     `protobuf:"bytes,3,opt,name=hash_address,json=hashAddress,proto3" json:"hash_address,omitempty"`
}

func (x *WriteHmacRequest) Reset() {
	*x = WriteHmacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteHmacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteHmacRequest) ProtoMessage() {}

func (x *WriteHmacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteHmacRequest.ProtoReflect.Descriptor instead.
func (*WriteHmacRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{18}
}

func (x *WriteHmacRequest) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *WriteHmacRequest) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *WriteHmacRequest) GetHashAddress() []byte {
	if x != nil {
		return x.HashAddress
	}
	return nil
}

type WriteHmacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0 - success , others need to be defined for different errors
	ErrorStatus   int64          `protobuf:"varint,1,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	AttestationId *AttestationID `protobuf:"bytes,2,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (x *WriteHmacResponse) Reset() {
	*x = WriteHmacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteHmacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteHmacResponse) ProtoMessage() {}

func (x *WriteHmacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteHmacResponse.ProtoReflect.Descriptor instead.
func (*WriteHmacResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{19}
}

func (x *WriteHmacResponse) GetErrorStatus() int64 {
	if x != nil {
		return x.ErrorStatus
	}
	return 0
}

func (x *WriteHmacResponse) GetAttestationId() *AttestationID {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

type SumHmacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   *SessionID `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	HashAddress []byte     `protobuf:"bytes,2,opt,name=hash_address,json=hashAddress,proto3" json:"hash_address,omitempty"`
	Input       []byte     `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *SumHmacRequest) Reset() {
	*x = SumHmacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumHmacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumHmacRequest) ProtoMessage() {}

func (x *SumHmacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumHmacRequest.ProtoReflect.Descriptor instead.
func (*SumHmacRequest) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{20}
}

func (x *SumHmacRequest) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *SumHmacRequest) GetHashAddress() []byte {
	if x != nil {
		return x.HashAddress
	}
	return nil
}

func (x *SumHmacRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

type SumHmacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0 - success , others need to be defined for different errors
	ErrorStatus   int64          `protobuf:"varint,1,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	Signature     []byte         `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	AttestationId *AttestationID `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (x *SumHmacResponse) Reset() {
	*x = SumHmacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumHmacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumHmacResponse) ProtoMessage() {}

func (x *SumHmacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumHmacResponse.ProtoReflect.Descriptor instead.
func (*SumHmacResponse) Descriptor() ([]byte, []int) {
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP(), []int{21}
}

func (x *SumHmacResponse) GetErrorStatus() int64 {
	if x != nil {
		return x.ErrorStatus
	}
	return 0
}

func (x *SumHmacResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SumHmacResponse) GetAttestationId() *AttestationID {
	if x != nil {
		return x.AttestationId
	}
	return nil
}

var File_pkg_cnskcprotobuf_cnskcprotobuf_proto protoreflect.FileDescriptor

var file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57,
	0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6b, 0x63, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x6b, 0x63, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0d, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x0f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x18, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0c, 0x74,
	0x65, 0x65, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x65, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0xe2, 0xdf, 0x1f, 0x18, 0x0a, 0x16, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x3d, 0x5d, 0x7b, 0x35, 0x2c, 0x31, 0x30, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x18, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x0e,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70,
	0x0a, 0x06, 0x4b, 0x42, 0x53, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58,
	0xe2, 0xdf, 0x1f, 0x54, 0x0a, 0x52, 0x28, 0x68, 0x74, 0x74, 0x70, 0x7c, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x29, 0x3a, 0x5c, 0x2f, 0x5c, 0x2f, 0x28, 0x5b, 0x5c, 0x77, 0x5f, 0x2d, 0x5d, 0x2b, 0x28,
	0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x5c, 0x2e, 0x5b, 0x5c, 0x77, 0x5f, 0x2d, 0x5d, 0x2b, 0x29, 0x2b,
	0x29, 0x29, 0x28, 0x5b, 0x5c, 0x77, 0x2e, 0x2c, 0x40, 0x3f, 0x5e, 0x3d, 0x25, 0x26, 0x3a, 0x5c,
	0x2f, 0x7e, 0x2b, 0x23, 0x2d, 0x5d, 0x2a, 0x5b, 0x5c, 0x77, 0x40, 0x3f, 0x5e, 0x3d, 0x25, 0x26,
	0x5c, 0x2f, 0x7e, 0x2b, 0x23, 0x2d, 0x5d, 0x29, 0x52, 0x06, 0x4b, 0x42, 0x53, 0x55, 0x52, 0x4c,
	0x12, 0x33, 0x0a, 0x08, 0x41, 0x41, 0x53, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xe2, 0xdf, 0x1f, 0x13, 0x0a, 0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x3d, 0x2d, 0x5f, 0x2b, 0x2f, 0x5d, 0x52, 0x08, 0x41, 0x41, 0x53,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x43, 0x4d, 0x53, 0x52, 0x6f, 0x6f, 0x74,
	0x43, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xe2, 0xdf, 0x1f, 0x13, 0x0a, 0x11,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x3d, 0x2d, 0x5f, 0x2b, 0x2f,
	0x5d, 0x52, 0x09, 0x43, 0x4d, 0x53, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x41, 0x22, 0xb0, 0x01, 0x0a,
	0x0c, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xab, 0x01, 0x0a, 0x0e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x18, 0x64, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0d,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a,
	0x0a, 0x47, 0x63, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a,
	0x0b, 0x47, 0x63, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x03,
	0x67, 0x63, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x03, 0x67, 0x63, 0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0xe2, 0xdf,
	0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x10, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x03, 0x67, 0x63, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x03, 0x67, 0x63, 0x6d, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e,
	0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x03, 0x67, 0x63, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x03, 0x67, 0x63, 0x6d, 0x12, 0x18, 0x0a, 0x03, 0x64,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x53, 0x65,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x03, 0x67, 0x63, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x03,
	0x67, 0x63, 0x6d, 0x12, 0x18, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xba, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e,
	0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x90, 0x01, 0x0a, 0x0b, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x73, 0x68, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x34, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x6d, 0x61,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x96, 0x01, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0xe2, 0xdf,
	0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x18, 0x64, 0x52,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x53, 0x75,
	0x6d, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x6d, 0x48, 0x6d,
	0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x11, 0xe2, 0xdf, 0x1f, 0x0d, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x18, 0x64, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x32, 0xdc, 0x05, 0x0a, 0x0d, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x12, 0x48, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x1a, 0x23, 0x2e, 0x63, 0x6e, 0x73, 0x6b,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x09, 0x4e, 0x65, 0x77, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x63, 0x6e,
	0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x47, 0x43,
	0x4d, 0x12, 0x19, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x47, 0x63, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63,
	0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x63, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x6c,
	0x12, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63,
	0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x12, 0x1a, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6e, 0x73, 0x6b,
	0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48,
	0x6d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6e, 0x73,
	0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x03,
	0x53, 0x75, 0x6d, 0x12, 0x1d, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x75, 0x6d, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x75, 0x6d, 0x48, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x54, 0x5a, 0x52, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x73, 0x65, 0x63,
	0x6c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73,
	0x6b, 0x63, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6e, 0x73, 0x6b, 0x63, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescOnce sync.Once
	file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescData = file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDesc
)

func file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescGZIP() []byte {
	file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescOnce.Do(func() {
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescData)
	})
	return file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDescData
}

var file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_pkg_cnskcprotobuf_cnskcprotobuf_proto_goTypes = []interface{}{
	(*SessionRequest)(nil),       // 0: cnskcprotobuf.SessionRequest
	(*SessionID)(nil),            // 1: cnskcprotobuf.SessionID
	(*AttestationID)(nil),        // 2: cnskcprotobuf.AttestationID
	(*SessionResponse)(nil),      // 3: cnskcprotobuf.SessionResponse
	(*CloseSessionResponse)(nil), // 4: cnskcprotobuf.CloseSessionResponse
	(*KeyInformation)(nil),       // 5: cnskcprotobuf.KeyInformation
	(*KeyIDRequest)(nil),         // 6: cnskcprotobuf.KeyIDRequest
	(*CipherResponse)(nil),       // 7: cnskcprotobuf.CipherResponse
	(*GcmRequest)(nil),           // 8: cnskcprotobuf.GcmRequest
	(*GcmResponse)(nil),          // 9: cnskcprotobuf.GcmResponse
	(*NonceSizeRequest)(nil),     // 10: cnskcprotobuf.NonceSizeRequest
	(*NonceSizeResponse)(nil),    // 11: cnskcprotobuf.NonceSizeResponse
	(*SealRequest)(nil),          // 12: cnskcprotobuf.SealRequest
	(*SealResponse)(nil),         // 13: cnskcprotobuf.SealResponse
	(*DecryptRequest)(nil),       // 14: cnskcprotobuf.DecryptRequest
	(*DecryptResponse)(nil),      // 15: cnskcprotobuf.DecryptResponse
	(*HmacRequest)(nil),          // 16: cnskcprotobuf.HmacRequest
	(*HmacResponse)(nil),         // 17: cnskcprotobuf.HmacResponse
	(*WriteHmacRequest)(nil),     // 18: cnskcprotobuf.WriteHmacRequest
	(*WriteHmacResponse)(nil),    // 19: cnskcprotobuf.WriteHmacResponse
	(*SumHmacRequest)(nil),       // 20: cnskcprotobuf.SumHmacRequest
	(*SumHmacResponse)(nil),      // 21: cnskcprotobuf.SumHmacResponse
}
var file_pkg_cnskcprotobuf_cnskcprotobuf_proto_depIdxs = []int32{
	1,  // 0: cnskcprotobuf.SessionResponse.session_id:type_name -> cnskcprotobuf.SessionID
	2,  // 1: cnskcprotobuf.SessionResponse.attestation_id:type_name -> cnskcprotobuf.AttestationID
	1,  // 2: cnskcprotobuf.KeyIDRequest.session_id:type_name -> cnskcprotobuf.SessionID
	5,  // 3: cnskcprotobuf.KeyIDRequest.key_info:type_name -> cnskcprotobuf.KeyInformation
	2,  // 4: cnskcprotobuf.CipherResponse.attestation_id:type_name -> cnskcprotobuf.AttestationID
	1,  // 5: cnskcprotobuf.GcmRequest.session_id:type_name -> cnskcprotobuf.SessionID
	2,  // 6: cnskcprotobuf.GcmResponse.attestation_id:type_name -> cnskcprotobuf.AttestationID
	1,  // 7: cnskcprotobuf.NonceSizeRequest.session_id:type_name -> cnskcprotobuf.SessionID
	2,  // 8: cnskcprotobuf.NonceSizeResponse.attestation_id:type_name -> cnskcprotobuf.AttestationID
	1,  // 9: cnskcprotobuf.SealRequest.session_id:type_name -> cnskcprotobuf.SessionID
	2,  // 10: cnskcprotobuf.SealResponse.attestation_id:type_name -> cnskcprotobuf.AttestationID
	1,  // 11: cnskcprotobuf.DecryptRequest.session_id:type_name -> cnskcprotobuf.SessionID
	2,  // 12: cnskcprotobuf.DecryptResponse.attestation_id:type_name -> cnskcprotobuf.AttestationID
	1,  // 13: cnskcprotobuf.HmacRequest.session_id:type_name -> cnskcprotobuf.SessionID
	2,  // 14: cnskcprotobuf.HmacResponse.attestation_id:type_name -> cnskcprotobuf.AttestationID
	1,  // 15: cnskcprotobuf.WriteHmacRequest.session_id:type_name -> cnskcprotobuf.SessionID
	2,  // 16: cnskcprotobuf.WriteHmacResponse.attestation_id:type_name -> cnskcprotobuf.AttestationID
	1,  // 17: cnskcprotobuf.SumHmacRequest.session_id:type_name -> cnskcprotobuf.SessionID
	2,  // 18: cnskcprotobuf.SumHmacResponse.attestation_id:type_name -> cnskcprotobuf.AttestationID
	0,  // 19: cnskcprotobuf.cnskcprotobuf.Session:input_type -> cnskcprotobuf.SessionRequest
	1,  // 20: cnskcprotobuf.cnskcprotobuf.CloseSession:input_type -> cnskcprotobuf.SessionID
	6,  // 21: cnskcprotobuf.cnskcprotobuf.NewCipher:input_type -> cnskcprotobuf.KeyIDRequest
	8,  // 22: cnskcprotobuf.cnskcprotobuf.NewGCM:input_type -> cnskcprotobuf.GcmRequest
	10, // 23: cnskcprotobuf.cnskcprotobuf.NonceSize:input_type -> cnskcprotobuf.NonceSizeRequest
	12, // 24: cnskcprotobuf.cnskcprotobuf.Seal:input_type -> cnskcprotobuf.SealRequest
	14, // 25: cnskcprotobuf.cnskcprotobuf.Open:input_type -> cnskcprotobuf.DecryptRequest
	16, // 26: cnskcprotobuf.cnskcprotobuf.New:input_type -> cnskcprotobuf.HmacRequest
	18, // 27: cnskcprotobuf.cnskcprotobuf.Write:input_type -> cnskcprotobuf.WriteHmacRequest
	20, // 28: cnskcprotobuf.cnskcprotobuf.Sum:input_type -> cnskcprotobuf.SumHmacRequest
	3,  // 29: cnskcprotobuf.cnskcprotobuf.Session:output_type -> cnskcprotobuf.SessionResponse
	4,  // 30: cnskcprotobuf.cnskcprotobuf.CloseSession:output_type -> cnskcprotobuf.CloseSessionResponse
	7,  // 31: cnskcprotobuf.cnskcprotobuf.NewCipher:output_type -> cnskcprotobuf.CipherResponse
	9,  // 32: cnskcprotobuf.cnskcprotobuf.NewGCM:output_type -> cnskcprotobuf.GcmResponse
	11, // 33: cnskcprotobuf.cnskcprotobuf.NonceSize:output_type -> cnskcprotobuf.NonceSizeResponse
	13, // 34: cnskcprotobuf.cnskcprotobuf.Seal:output_type -> cnskcprotobuf.SealResponse
	15, // 35: cnskcprotobuf.cnskcprotobuf.Open:output_type -> cnskcprotobuf.DecryptResponse
	17, // 36: cnskcprotobuf.cnskcprotobuf.New:output_type -> cnskcprotobuf.HmacResponse
	19, // 37: cnskcprotobuf.cnskcprotobuf.Write:output_type -> cnskcprotobuf.WriteHmacResponse
	21, // 38: cnskcprotobuf.cnskcprotobuf.Sum:output_type -> cnskcprotobuf.SumHmacResponse
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_pkg_cnskcprotobuf_cnskcprotobuf_proto_init() }
func file_pkg_cnskcprotobuf_cnskcprotobuf_proto_init() {
	if File_pkg_cnskcprotobuf_cnskcprotobuf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestationID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CipherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HmacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteHmacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteHmacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumHmacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumHmacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_cnskcprotobuf_cnskcprotobuf_proto_goTypes,
		DependencyIndexes: file_pkg_cnskcprotobuf_cnskcprotobuf_proto_depIdxs,
		MessageInfos:      file_pkg_cnskcprotobuf_cnskcprotobuf_proto_msgTypes,
	}.Build()
	File_pkg_cnskcprotobuf_cnskcprotobuf_proto = out.File
	file_pkg_cnskcprotobuf_cnskcprotobuf_proto_rawDesc = nil
	file_pkg_cnskcprotobuf_cnskcprotobuf_proto_goTypes = nil
	file_pkg_cnskcprotobuf_cnskcprotobuf_proto_depIdxs = nil
}
