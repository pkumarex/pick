// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: pkg/cnskcprotobuf/cnskcprotobuf.proto

package cnskcprotobuf_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CnskcprotobufClient is the client API for Cnskcprotobuf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CnskcprotobufClient interface {
	Session(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	CloseSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*CloseSessionResponse, error)
	NewCipher(ctx context.Context, in *KeyIDRequest, opts ...grpc.CallOption) (*CipherResponse, error)
	NewGCM(ctx context.Context, in *GcmRequest, opts ...grpc.CallOption) (*GcmResponse, error)
	NonceSize(ctx context.Context, in *NonceSizeRequest, opts ...grpc.CallOption) (*NonceSizeResponse, error)
	Seal(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealResponse, error)
	Open(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error)
	New(ctx context.Context, in *HmacRequest, opts ...grpc.CallOption) (*HmacResponse, error)
	Write(ctx context.Context, in *WriteHmacRequest, opts ...grpc.CallOption) (*WriteHmacResponse, error)
	Sum(ctx context.Context, in *SumHmacRequest, opts ...grpc.CallOption) (*SumHmacResponse, error)
}

type cnskcprotobufClient struct {
	cc grpc.ClientConnInterface
}

func NewCnskcprotobufClient(cc grpc.ClientConnInterface) CnskcprotobufClient {
	return &cnskcprotobufClient{cc}
}

func (c *cnskcprotobufClient) Session(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/Session", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnskcprotobufClient) CloseSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	out := new(CloseSessionResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnskcprotobufClient) NewCipher(ctx context.Context, in *KeyIDRequest, opts ...grpc.CallOption) (*CipherResponse, error) {
	out := new(CipherResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/NewCipher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnskcprotobufClient) NewGCM(ctx context.Context, in *GcmRequest, opts ...grpc.CallOption) (*GcmResponse, error) {
	out := new(GcmResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/NewGCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnskcprotobufClient) NonceSize(ctx context.Context, in *NonceSizeRequest, opts ...grpc.CallOption) (*NonceSizeResponse, error) {
	out := new(NonceSizeResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/NonceSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnskcprotobufClient) Seal(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealResponse, error) {
	out := new(SealResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/Seal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnskcprotobufClient) Open(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error) {
	out := new(DecryptResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnskcprotobufClient) New(ctx context.Context, in *HmacRequest, opts ...grpc.CallOption) (*HmacResponse, error) {
	out := new(HmacResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnskcprotobufClient) Write(ctx context.Context, in *WriteHmacRequest, opts ...grpc.CallOption) (*WriteHmacResponse, error) {
	out := new(WriteHmacResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnskcprotobufClient) Sum(ctx context.Context, in *SumHmacRequest, opts ...grpc.CallOption) (*SumHmacResponse, error) {
	out := new(SumHmacResponse)
	err := c.cc.Invoke(ctx, "/cnskcprotobuf.cnskcprotobuf/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CnskcprotobufServer is the server API for Cnskcprotobuf service.
// All implementations must embed UnimplementedCnskcprotobufServer
// for forward compatibility
type CnskcprotobufServer interface {
	Session(context.Context, *SessionRequest) (*SessionResponse, error)
	CloseSession(context.Context, *SessionID) (*CloseSessionResponse, error)
	NewCipher(context.Context, *KeyIDRequest) (*CipherResponse, error)
	NewGCM(context.Context, *GcmRequest) (*GcmResponse, error)
	NonceSize(context.Context, *NonceSizeRequest) (*NonceSizeResponse, error)
	Seal(context.Context, *SealRequest) (*SealResponse, error)
	Open(context.Context, *DecryptRequest) (*DecryptResponse, error)
	New(context.Context, *HmacRequest) (*HmacResponse, error)
	Write(context.Context, *WriteHmacRequest) (*WriteHmacResponse, error)
	Sum(context.Context, *SumHmacRequest) (*SumHmacResponse, error)
	mustEmbedUnimplementedCnskcprotobufServer()
}

// UnimplementedCnskcprotobufServer must be embedded to have forward compatible implementations.
type UnimplementedCnskcprotobufServer struct {
}

func (UnimplementedCnskcprotobufServer) Session(context.Context, *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedCnskcprotobufServer) CloseSession(context.Context, *SessionID) (*CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedCnskcprotobufServer) NewCipher(context.Context, *KeyIDRequest) (*CipherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCipher not implemented")
}
func (UnimplementedCnskcprotobufServer) NewGCM(context.Context, *GcmRequest) (*GcmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGCM not implemented")
}
func (UnimplementedCnskcprotobufServer) NonceSize(context.Context, *NonceSizeRequest) (*NonceSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NonceSize not implemented")
}
func (UnimplementedCnskcprotobufServer) Seal(context.Context, *SealRequest) (*SealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seal not implemented")
}
func (UnimplementedCnskcprotobufServer) Open(context.Context, *DecryptRequest) (*DecryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedCnskcprotobufServer) New(context.Context, *HmacRequest) (*HmacResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (UnimplementedCnskcprotobufServer) Write(context.Context, *WriteHmacRequest) (*WriteHmacResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedCnskcprotobufServer) Sum(context.Context, *SumHmacRequest) (*SumHmacResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedCnskcprotobufServer) mustEmbedUnimplementedCnskcprotobufServer() {}

// UnsafeCnskcprotobufServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CnskcprotobufServer will
// result in compilation errors.
type UnsafeCnskcprotobufServer interface {
	mustEmbedUnimplementedCnskcprotobufServer()
}

func RegisterCnskcprotobufServer(s grpc.ServiceRegistrar, srv CnskcprotobufServer) {
	s.RegisterService(&Cnskcprotobuf_ServiceDesc, srv)
}

func _Cnskcprotobuf_Session_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).Session(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/Session",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).Session(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cnskcprotobuf_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).CloseSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cnskcprotobuf_NewCipher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).NewCipher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/NewCipher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).NewCipher(ctx, req.(*KeyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cnskcprotobuf_NewGCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GcmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).NewGCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/NewGCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).NewGCM(ctx, req.(*GcmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cnskcprotobuf_NonceSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).NonceSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/NonceSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).NonceSize(ctx, req.(*NonceSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cnskcprotobuf_Seal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).Seal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/Seal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).Seal(ctx, req.(*SealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cnskcprotobuf_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).Open(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cnskcprotobuf_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HmacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).New(ctx, req.(*HmacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cnskcprotobuf_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteHmacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).Write(ctx, req.(*WriteHmacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cnskcprotobuf_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumHmacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnskcprotobufServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnskcprotobuf.cnskcprotobuf/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnskcprotobufServer).Sum(ctx, req.(*SumHmacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cnskcprotobuf_ServiceDesc is the grpc.ServiceDesc for Cnskcprotobuf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cnskcprotobuf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cnskcprotobuf.cnskcprotobuf",
	HandlerType: (*CnskcprotobufServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Session",
			Handler:    _Cnskcprotobuf_Session_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _Cnskcprotobuf_CloseSession_Handler,
		},
		{
			MethodName: "NewCipher",
			Handler:    _Cnskcprotobuf_NewCipher_Handler,
		},
		{
			MethodName: "NewGCM",
			Handler:    _Cnskcprotobuf_NewGCM_Handler,
		},
		{
			MethodName: "NonceSize",
			Handler:    _Cnskcprotobuf_NonceSize_Handler,
		},
		{
			MethodName: "Seal",
			Handler:    _Cnskcprotobuf_Seal_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _Cnskcprotobuf_Open_Handler,
		},
		{
			MethodName: "New",
			Handler:    _Cnskcprotobuf_New_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Cnskcprotobuf_Write_Handler,
		},
		{
			MethodName: "Sum",
			Handler:    _Cnskcprotobuf_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/cnskcprotobuf/cnskcprotobuf.proto",
}
